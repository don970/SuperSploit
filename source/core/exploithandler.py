import os
import subprocess
import traceback


from .database import DatabaseManagment
from .errors import Error
from .ToStdOut import ToStdout
from threading import Thread


error = Error
write = ToStdout.write
class exploitDetails:
    def __init__(self):
        os.system("clear")
        write("[*] Loading exploit details")
        with open(DatabaseManagment.get()["EXPLOIT"]) as file:
            data = file.read().split("#!#!#!")
            file.close()
        write(f'exploit Name: {DatabaseManagment.get()["EXPLOIT"]}\nExploit Details:')
        data = data[1].lstrip('"').rstrip('"')
        dataList = data.split("# REQUIRED OPTIONS")
        write(f"{dataList[0]}# REQUIRED OPTIONS")
        args = []
        for x in dataList[1].split("\n"):
            try:
                args.append(x.split(":")[0].split(" ")[1])
            except IndexError:
                pass

        for k, v in DatabaseManagment.get().items():
            for x in args:
                if x == k:
                    write(f"{k}: {v}")


class ExploitHandler:
    def __init__(self, *args):
        types = ["py", "sh"]
        funs = [self.python, self.sh]
        self.database = DatabaseManagment.get()
        write("[*] Loaded database.")
        self.term = DatabaseManagment.findTerm()
        write(f"[*] Loaded terminal program: {self.term}")
        Type = self.database["EXPLOIT"].split(".")[len(self.database["EXPLOIT"].split('.')) - 1]
        write(f"[*] Found exploit type {Type}")
        integration = DatabaseManagment.checkIntegration()
        if integration:
            write("[*] SuperSploit integrated exploit detected.")
            if DatabaseManagment.socketedExploit():
                write("[*] Remote exploit detected")
                re = Thread(target=self.remoteExploit)
                re.start()
        if Type in types:
            funs[types.index(Type)]()

    def python(self):
        try:
            write("Starting Exploit")
            subprocess.run(["python3", self.database["EXPLOIT"]])
            write("Exploit completed")
        except Exception:
            error(f"[!] {traceback.format_exc()}")


    def remoteExploit(self):
        try:
            subprocess.run(["", "python3", "payloads/python/multiPlatform.py"])
        except Exception as e:
            write(e)


    def sh(self):
        try:
            write("Starting Exploit")
            subprocess.run(["bash", self.database["EXPLOIT"]])
            write("Exploit completed")
        except Exception:
            error(traceback.format_exc())
