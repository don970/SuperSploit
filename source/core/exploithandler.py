import os
import subprocess
import traceback

from .database import DatabaseManagment
from .errors import Error
from .ToStdOut import ToStdout

error = Error
write = ToStdout.write
class exploitDetails:
    def __init__(self):
        os.system("clear")
        with open(DatabaseManagment.get()["EXPLOIT"]) as file:
            data = file.read().split("#!#!#!")

        write(f'exploit: {DatabaseManagment.get()["EXPLOIT"]}\nDetails')
        data = data[1].lstrip('"').rstrip('"')
        write(f"{data}")
        pass


class ExploitHandler:
    def __init__(self, *args):
        types = ["py", "c", "sh"]
        funs = [self.python, self.sh]
        self.database = DatabaseManagment.get()
        self.term = DatabaseManagment.findTerm()
        Type = self.database["EXPLOIT"].split(".")[1]
        if Type in types:
            funs[types.index(Type)]()

    def python(self):
        try:
            write("Starting Exploit")
            subprocess.run(["python3", self.database["EXPLOIT"], self.term])
            write("Exploit completed")
        except Exception:
            error(traceback.format_exc())


    def sh(self):
        try:
            write("Starting Exploit")
            subprocess.run(["bash", self.database["EXPLOIT"]])
            write("Exploit completed")
        except Exception:
            error(traceback.format_exc())
